//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jul 18 14:51:20 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// wrap64_setAddr                 O    94
// wrap64_setAddr_cap             I    93
// wrap64_setAddr_addr            I    32
//
// Combinational paths from inputs to outputs:
//   (wrap64_setAddr_cap, wrap64_setAddr_addr) -> wrap64_setAddr
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_setAddr(wrap64_setAddr_cap,
			     wrap64_setAddr_addr,
			     wrap64_setAddr);
  // value method wrap64_setAddr
  input  [92 : 0] wrap64_setAddr_cap;
  input  [31 : 0] wrap64_setAddr_addr;
  output [93 : 0] wrap64_setAddr;

  // signals for module outputs
  wire [93 : 0] wrap64_setAddr;

  // remaining internal signals
  wire [35 : 0] mask__h64, newAddrDiff__h65, x__h141, x__h178, y__h209;
  wire [33 : 0] result_d_address__h432, x__h294;
  wire [5 : 0] x__h176;
  wire [3 : 0] IF_wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap_ETC___d61;
  wire [2 : 0] repBound__h563;
  wire IF_0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_A_ETC___d35,
       NOT_wrap64_setAddr_cap_BITS_31_TO_26_ULT_23_OR_ETC___d39,
       _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d26,
       _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51,
       _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d13,
       _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d36,
       wrap64_setAddr_cap_BITS_17_TO_15_6_ULT_wrap64__ETC___d50,
       wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap64__ETC___d49;

  // value method wrap64_setAddr
  assign wrap64_setAddr =
	     { NOT_wrap64_setAddr_cap_BITS_31_TO_26_ULT_23_OR_ETC___d39,
	       NOT_wrap64_setAddr_cap_BITS_31_TO_26_ULT_23_OR_ETC___d39 &&
	       wrap64_setAddr_cap[92],
	       result_d_address__h432,
	       x__h294[7:0],
	       wrap64_setAddr_cap[49:10],
	       repBound__h563,
	       wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap64__ETC___d49,
	       wrap64_setAddr_cap_BITS_17_TO_15_6_ULT_wrap64__ETC___d50,
	       _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51,
	       IF_wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap_ETC___d61 } ;

  // remaining internal signals
  assign IF_0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_A_ETC___d35 =
	     ((newAddrDiff__h65 == 36'd0) ?
		2'd0 :
		(_0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d13 ?
		   2'd3 :
		   2'd1)) ==
	     ((wrap64_setAddr_cap[4] &&
	       _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d26) ?
		2'd0 :
		((wrap64_setAddr_cap[4] &&
		  !_0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d26) ?
		   2'd1 :
		   ((!wrap64_setAddr_cap[4] &&
		     _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d26) ?
		      2'd3 :
		      2'd0))) ;
  assign IF_wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap_ETC___d61 =
	     { (wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap64__ETC___d49 ==
		_0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51) ?
		 2'd0 :
		 ((wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap64__ETC___d49 &&
		   !_0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51) ?
		    2'd1 :
		    2'd3),
	       (wrap64_setAddr_cap_BITS_17_TO_15_6_ULT_wrap64__ETC___d50 ==
		_0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51) ?
		 2'd0 :
		 ((wrap64_setAddr_cap_BITS_17_TO_15_6_ULT_wrap64__ETC___d50 &&
		   !_0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51) ?
		    2'd1 :
		    2'd3) } ;
  assign NOT_wrap64_setAddr_cap_BITS_31_TO_26_ULT_23_OR_ETC___d39 =
	     wrap64_setAddr_cap[31:26] >= 6'd23 ||
	     IF_0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_A_ETC___d35 &&
	     (newAddrDiff__h65 == 36'd0 ||
	      _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d36) ;
  assign _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d26 =
	     x__h294[7:5] < wrap64_setAddr_cap[9:7] ;
  assign _0_CONCAT_wrap64_setAddr_addr_2_SRL_wrap64_setA_ETC___d51 =
	     x__h294[7:5] < repBound__h563 ;
  assign _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d13 =
	     newAddrDiff__h65 == mask__h64 ;
  assign _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d36 =
	     _0_CONCAT_wrap64_setAddr_cap_BITS_91_TO_58_AND__ETC___d13 ||
	     newAddrDiff__h65 == (mask__h64 ^ y__h209) ;
  assign mask__h64 = 36'hFFFFFFFFF << x__h176 ;
  assign newAddrDiff__h65 = (x__h141 & mask__h64) - (x__h178 & mask__h64) ;
  assign repBound__h563 = wrap64_setAddr_cap[17:15] - 3'b001 ;
  assign result_d_address__h432 = { 2'd0, wrap64_setAddr_addr } ;
  assign wrap64_setAddr_cap_BITS_17_TO_15_6_ULT_wrap64__ETC___d50 =
	     wrap64_setAddr_cap[17:15] < repBound__h563 ;
  assign wrap64_setAddr_cap_BITS_25_TO_23_8_ULT_wrap64__ETC___d49 =
	     wrap64_setAddr_cap[25:23] < repBound__h563 ;
  assign x__h141 = { 2'd0, wrap64_setAddr_cap[91:58] } ;
  assign x__h176 = wrap64_setAddr_cap[31:26] + 6'd8 ;
  assign x__h178 = { 4'd0, wrap64_setAddr_addr } ;
  assign x__h294 = result_d_address__h432 >> wrap64_setAddr_cap[31:26] ;
  assign y__h209 = { mask__h64[34:0], 1'd0 } ;
endmodule  // module_wrap64_setAddr

