//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jul 18 14:51:20 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// wrap64_setOffset               O    94
// wrap64_setOffset_cap           I    93
// wrap64_setOffset_offset        I    32
//
// Combinational paths from inputs to outputs:
//   (wrap64_setOffset_cap, wrap64_setOffset_offset) -> wrap64_setOffset
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_setOffset(wrap64_setOffset_cap,
			       wrap64_setOffset_offset,
			       wrap64_setOffset);
  // value method wrap64_setOffset
  input  [92 : 0] wrap64_setOffset_cap;
  input  [31 : 0] wrap64_setOffset_offset;
  output [93 : 0] wrap64_setOffset;

  // signals for module outputs
  wire [93 : 0] wrap64_setOffset;

  // remaining internal signals
  wire [33 : 0] result_d_address__h337;
  wire [31 : 0] addBase__h357, bot__h360, x__h239;
  wire [23 : 0] highOffsetBits__h66, mask__h358, signBits__h63, x__h92;
  wire [9 : 0] newAddrBits__h326, x__h414;
  wire [7 : 0] repBoundBits__h72,
	       result_d_addrBits__h338,
	       toBoundsM1__h76,
	       toBounds__h75;
  wire [3 : 0] IF_wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wr_ETC___d71;
  wire [2 : 0] repBound__h584;
  wire IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61,
       IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d25,
       wrap64_setOffset_cap_BITS_17_TO_15_5_ULT_wrap6_ETC___d59,
       wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wrap6_ETC___d58;

  // value method wrap64_setOffset
  assign wrap64_setOffset =
	     { highOffsetBits__h66 == 24'd0 &&
	       IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d25 ||
	       wrap64_setOffset_cap[31:26] >= 6'd24,
	       (highOffsetBits__h66 == 24'd0 &&
		IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d25 ||
		wrap64_setOffset_cap[31:26] >= 6'd24) &&
	       wrap64_setOffset_cap[92],
	       result_d_address__h337,
	       result_d_addrBits__h338,
	       wrap64_setOffset_cap[49:10],
	       repBound__h584,
	       wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wrap6_ETC___d58,
	       wrap64_setOffset_cap_BITS_17_TO_15_5_ULT_wrap6_ETC___d59,
	       IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61,
	       IF_wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wr_ETC___d71 } ;

  // remaining internal signals
  assign IF_wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wr_ETC___d71 =
	     { (wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wrap6_ETC___d58 ==
		IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61) ?
		 2'd0 :
		 ((wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wrap6_ETC___d58 &&
		   !IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61) ?
		    2'd1 :
		    2'd3),
	       (wrap64_setOffset_cap_BITS_17_TO_15_5_ULT_wrap6_ETC___d59 ==
		IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61) ?
		 2'd0 :
		 ((wrap64_setOffset_cap_BITS_17_TO_15_5_ULT_wrap6_ETC___d59 &&
		   !IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61) ?
		    2'd1 :
		    2'd3) } ;
  assign IF_wrap64_setOffset_cap_BITS_31_TO_26_EQ_26_4__ETC___d61 =
	     result_d_addrBits__h338[7:5] < repBound__h584 ;
  assign IF_wrap64_setOffset_offset_BIT_31_THEN_NOT_wra_ETC___d25 =
	     wrap64_setOffset_offset[31] ?
	       x__h239[7:0] >= toBounds__h75 &&
	       repBoundBits__h72 != wrap64_setOffset_cap[57:50] :
	       x__h239[7:0] < toBoundsM1__h76 ;
  assign addBase__h357 =
	     { {22{x__h414[9]}}, x__h414 } << wrap64_setOffset_cap[31:26] ;
  assign bot__h360 =
	     { wrap64_setOffset_cap[89:66] & mask__h358, 8'd0 } +
	     addBase__h357 ;
  assign highOffsetBits__h66 = x__h92 & mask__h358 ;
  assign mask__h358 = 24'd16777215 << wrap64_setOffset_cap[31:26] ;
  assign newAddrBits__h326 =
	     { 2'd0, wrap64_setOffset_cap[17:10] } + { 2'd0, x__h239[7:0] } ;
  assign repBoundBits__h72 = { wrap64_setOffset_cap[9:7], 5'd0 } ;
  assign repBound__h584 = wrap64_setOffset_cap[17:15] - 3'b001 ;
  assign result_d_addrBits__h338 =
	     (wrap64_setOffset_cap[31:26] == 6'd26) ?
	       { 1'b0, newAddrBits__h326[6:0] } :
	       newAddrBits__h326[7:0] ;
  assign result_d_address__h337 =
	     { 2'd0, bot__h360 } + { 2'd0, wrap64_setOffset_offset } ;
  assign signBits__h63 = {24{wrap64_setOffset_offset[31]}} ;
  assign toBoundsM1__h76 = { 3'b110, ~wrap64_setOffset_cap[14:10] } ;
  assign toBounds__h75 = 8'd224 - { 3'b0, wrap64_setOffset_cap[14:10] } ;
  assign wrap64_setOffset_cap_BITS_17_TO_15_5_ULT_wrap6_ETC___d59 =
	     wrap64_setOffset_cap[17:15] < repBound__h584 ;
  assign wrap64_setOffset_cap_BITS_25_TO_23_7_ULT_wrap6_ETC___d58 =
	     wrap64_setOffset_cap[25:23] < repBound__h584 ;
  assign x__h239 = wrap64_setOffset_offset >> wrap64_setOffset_cap[31:26] ;
  assign x__h414 =
	     { wrap64_setOffset_cap[1:0], wrap64_setOffset_cap[17:10] } ;
  assign x__h92 = wrap64_setOffset_offset[31:8] ^ signBits__h63 ;
endmodule  // module_wrap64_setOffset

