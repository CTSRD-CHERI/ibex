//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jul 18 14:51:20 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// wrap64_getTop                  O    33
// wrap64_getTop_cap              I    93
//
// Combinational paths from inputs to outputs:
//   wrap64_getTop_cap -> wrap64_getTop
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_wrap64_getTop(wrap64_getTop_cap,
			    wrap64_getTop);
  // value method wrap64_getTop
  input  [92 : 0] wrap64_getTop_cap;
  output [32 : 0] wrap64_getTop;

  // signals for module outputs
  wire [32 : 0] wrap64_getTop;

  // remaining internal signals
  reg x__h289;
  wire [33 : 0] addTop__h52,
		result__h582,
		ret__h56,
		wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12,
		x__h49;
  wire [25 : 0] mask__h53;
  wire [23 : 0] wrap64_getTop_cap_BITS_89_TO_66_PLUS_SEXT_wrap_ETC__q2;
  wire [9 : 0] x__h206;
  wire [1 : 0] wrap64_getTop_cap_BITS_1_TO_0__q1;
  wire wrap64_getTop_cap_BITS_31_TO_26_ULT_25_AND_NOT_ETC___d30;

  // value method wrap64_getTop
  assign wrap64_getTop = x__h49[32:0] ;

  // remaining internal signals
  assign addTop__h52 =
	     { {24{x__h206[9]}}, x__h206 } << wrap64_getTop_cap[31:26] ;
  assign mask__h53 = 26'd67108863 << wrap64_getTop_cap[31:26] ;
  assign result__h582 =
	     { 1'd0,
	       ~wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12[32],
	       wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12[31:0] } ;
  assign ret__h56 =
	     { 1'd0,
	       wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12[32:0] } ;
  assign wrap64_getTop_cap_BITS_1_TO_0__q1 = wrap64_getTop_cap[1:0] ;
  assign wrap64_getTop_cap_BITS_31_TO_26_ULT_25_AND_NOT_ETC___d30 =
	     wrap64_getTop_cap[31:26] < 6'd25 &&
	     wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12[32:31] -
	     { 1'd0, x__h289 } >
	     2'd1 ;
  assign wrap64_getTop_cap_BITS_89_TO_66_PLUS_SEXT_wrap_ETC__q2 =
	     wrap64_getTop_cap[89:66] +
	     ({ {22{wrap64_getTop_cap_BITS_1_TO_0__q1[1]}},
		wrap64_getTop_cap_BITS_1_TO_0__q1 } <<
	      wrap64_getTop_cap[31:26]) ;
  assign wrap64_getTop_cap_BITS_91_TO_66_AND_67108863_S_ETC___d12 =
	     { wrap64_getTop_cap[91:66] & mask__h53, 8'd0 } + addTop__h52 ;
  assign x__h206 = { wrap64_getTop_cap[3:2], wrap64_getTop_cap[25:18] } ;
  assign x__h49 =
	     wrap64_getTop_cap_BITS_31_TO_26_ULT_25_AND_NOT_ETC___d30 ?
	       result__h582 :
	       ret__h56 ;
  always@(wrap64_getTop_cap or
	  wrap64_getTop_cap_BITS_89_TO_66_PLUS_SEXT_wrap_ETC__q2)
  begin
    case (wrap64_getTop_cap[31:26])
      6'd24: x__h289 = wrap64_getTop_cap[17];
      6'd25: x__h289 = wrap64_getTop_cap[16];
      default: x__h289 =
		   wrap64_getTop_cap_BITS_89_TO_66_PLUS_SEXT_wrap_ETC__q2[23];
    endcase
  end
endmodule  // module_wrap64_getTop

